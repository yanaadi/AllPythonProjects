{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 1.9.6\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n",
      "starting\n",
      "Playing D:/mp3/file_example_MP3_5MG.mp3\n"
     ]
    }
   ],
   "source": [
    "import tkinter as tk\n",
    "\n",
    "from tkinter import messagebox,filedialog\n",
    "\n",
    "import pygame\n",
    "\n",
    "from threading import Thread\n",
    "\n",
    "class player:\n",
    "    \n",
    "    def __init__(self,win):\n",
    "        \n",
    "        pygame.init()\n",
    "        \n",
    "        pygame.display.init()\n",
    "        \n",
    "        pygame.mixer.init()\n",
    "        \n",
    "        self.win = win\n",
    "        \n",
    "        self.win.title('Mp3 Player')\n",
    "        \n",
    "        self.win.geometry('200x250')\n",
    "        \n",
    "        self.win.rowconfigure((0,1,2,3,4,5),weight=1)\n",
    "        \n",
    "        self.win.columnconfigure((0,1,2,3,4,5,6),weight=1)\n",
    "        \n",
    "        self.v = tk.StringVar()\n",
    "        \n",
    "        self.i = 0\n",
    "        \n",
    "        self.frm2 = tk.Frame(master = self.win, relief = tk.SUNKEN,borderwidth=5,width =60)\n",
    "        \n",
    "        self.frm1 = tk.Frame(master = self.win, relief = tk.SUNKEN,borderwidth = 5)\n",
    "        \n",
    "        self.but1 = tk.Button(master =self.frm2,relief = tk.RAISED,text = 'Play', fg = 'Black',bg = 'Grey',command = self.play,width=10)\n",
    "        \n",
    "        self.but2 = tk.Button(master=self.frm2,relief = tk.RAISED,text = 'Pause', fg = 'Black',bg = 'Grey',command = self.pause,width=10)\n",
    "        \n",
    "        self.but3 = tk.Button(master=self.frm2,relief = tk.RAISED,text = 'Resume', fg = 'Black',bg = 'Grey',command = self.resume,width=10)\n",
    "        \n",
    "        self.but5 = tk.Button(text = 'Open File',fg = 'Black',bg = 'Grey',command = self.openfile )\n",
    "        \n",
    "        self.lbl1 = tk.Label(master = self.frm1,textvariable = self.v,fg ='Black',width = 100)\n",
    "        \n",
    "        self.sld1 = tk.Scale(from_=0,to=1,resolution=0.1,command = self.volumeset)\n",
    "        \n",
    "        self.vol = self.sld1.get()\n",
    "        \n",
    "        self.but1.grid(row=5,column=0,padx = 3,pady=3)\n",
    "        \n",
    "        self.but2.grid(row=5,column=1,padx=3,pady =3)\n",
    "        \n",
    "        self.but3.grid(row=5,column=2,padx=3,pady=3)\n",
    "        \n",
    "        self.but5.grid(row=1,column=1)\n",
    "        \n",
    "        self.frm1.grid(row=1,column =0)\n",
    "        \n",
    "        self.frm2.grid()\n",
    "        \n",
    "        self.lbl1.grid()\n",
    "        \n",
    "        self.sld1.grid(row = 1, column = 6)\n",
    "        \n",
    "    def next_(self):\n",
    "        \n",
    "        running = True\n",
    "        \n",
    "        while running:\n",
    "            \n",
    "            if self.i <= len(dir_) - 1:\n",
    "                \n",
    "                for event in pygame.event.get():\n",
    "                    \n",
    "                    if event.type == pygame.USEREVENT:\n",
    "                        \n",
    "                        for _ in range(len(dir_[self.i])):\n",
    "                            \n",
    "                            if dir_[self.i][_] == '/' and '/' not in dir_[self.i][_+1:]:\n",
    "                                \n",
    "                                self.v.set('Now Playing  '+ dir_[self.i][_+1:])\n",
    "                                \n",
    "                        pygame.mixer.music.load(dir_[self.i])\n",
    "                        \n",
    "                        print('Playing',dir_[self.i])\n",
    "                        \n",
    "                        pygame.mixer.music.play()\n",
    "                        \n",
    "                        self.i+=1\n",
    "            else:\n",
    "                \n",
    "                running = False\n",
    "        \n",
    "        \n",
    "    def play(self):\n",
    "        \n",
    "        for j in range(len(dir_[self.i])):\n",
    "            \n",
    "            if dir_[self.i][j] == '/' and '/' not in dir_[self.i][j+1:]:\n",
    "                \n",
    "                self.v.set('Now Playing  '+ dir_[self.i][j+1:])\n",
    "                    \n",
    "        pygame.mixer.music.load(dir_[self.i])\n",
    "            \n",
    "        pygame.mixer.music.set_endevent(pygame.USEREVENT)\n",
    "            \n",
    "        pygame.mixer.music.play()\n",
    "            \n",
    "        self.i+=1\n",
    "            \n",
    "        t = Thread(target = self.next_,args = ())\n",
    "            \n",
    "        t.start()\n",
    "        \n",
    "        print('starting')\n",
    "                    \n",
    "            \n",
    "    def msg_error(self):\n",
    "        \n",
    "        messagebox.showerror('Error','Invalid File Type Detected')\n",
    "        \n",
    "    def msg_valid(self):\n",
    "        \n",
    "        messagebox.showinfo('Info','All Files Added')\n",
    "        \n",
    "    def openfile(self):\n",
    "        \n",
    "        global dir_\n",
    "        \n",
    "        dir_ = list(filedialog.askopenfilenames())\n",
    "        \n",
    "        for songs in dir_:\n",
    "            \n",
    "            if bool(songs.endswith('.mp3')) == False:\n",
    "                \n",
    "                self.msg_error()\n",
    "        else:\n",
    "                \n",
    "            self.msg_valid()\n",
    "            \n",
    "    def volumeset(self,vol1):\n",
    "        \n",
    "        pygame.mixer.music.set_volume(float(vol1))\n",
    "                \n",
    "    def pause(self):\n",
    "        \n",
    "        pygame.mixer.music.pause()\n",
    "        \n",
    "    def resume(self):\n",
    "        \n",
    "        pygame.mixer.music.unpause()\n",
    "        \n",
    "  \n",
    "\n",
    "win = tk.Tk()                        \n",
    "\n",
    "a = player(win)\n",
    "\n",
    "win.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
